##############################################################################
# .scat: Simple text format for defining the AST classes that our generation
# tools will use to build the expression and statement classes. 
# 
# The format follows the acronym SCAT, in which the segment AT may
# be repeated as necessary to define multiple arguments:
#
#   S = superclass name
#   C = class name
#   A = arg name
#   T = arg type
#
# Whitespace will be copied into the resulting class definition, so the 
# spacing below is recommended:
#
#   S;C;A: T,A: T,A: T,A: T
# 
# E.g., the phrase
#
#   Expr;Binary;left: Expr,operator: Token,right: Expr
#
# can be used to encode:
#
#   @dataclass
#   class Binary(Expr):
#       """A representation of a binary expression."""
#       left: Expr
#       operator: Token
#       right: Expr
#
#       def accept(self, visitor: ExprVisitor) -> Any:
#           return visitor.visit_BinaryExpr(self)
#
# as well as the visitor protocol for the given superclass:
#   
#   class ExprVisitor(Protocol):
#       """Protocol for a visitor that provides behaviour to a
#       subclass of Expr.
#       """
#       def visit_BinaryExpr(self, expr: "Binary") -> Any: ... 
#       ...
#
##############################################################################

# Expression Classes
# ==================
Expr;Binary;left: Expr,operator: Token,right: Expr
Expr;Grouping;expression: Expr
Expr;Literal;value: object
Expr;Unary;operator: Token,right: Expr
Expr;Ternary;condition: Expr,true_branch: Expr,false_branch: Ternary